<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<!--
Syntax highlighting generated by Web C Plus Plus software v0.8.4
Webcpp Copyright (C)2001-2004 Jeffrey Bakker under the GNU GPL
Get webcpp at http://webcpp.sf.net
-->

<link rel="stylesheet" type="text/css" href="typical.css"/>
<div class="webcpp">
<pre>

<font CLASS=preproc>#include&lt;iostream&gt;</font> 

<font CLASS=keyword>using</font> <font CLASS=keyword>namespace</font> std;
<font CLASS=keyword>enum</font> {
    SIZ <font CLASS=symbols>=</font> <font CLASS=integer>100008</font>,
};
<font CLASS=keyword>struct</font> Point
{
    <font CLASS=keytype>double</font> x;
    <font CLASS=keytype>double</font> y;
};
<font CLASS=keyword>struct</font> Line
{
    <font CLASS=keytype>int</font> no;
    Line *next;
    Point s;
    Point e;
};
Line lin[SIZ];
Line *head;
Line *save[SIZ];
<font CLASS=keytype>int</font> top,num;
<font CLASS=keytype>void</font> init(){
    <font CLASS=keytype>int</font> i;
    <font CLASS=keyword>for</font>(i<font CLASS=symbols>=</font><font CLASS=integer>0</font>;i&lt;SIZ<font CLASS=symbols>-</font><font CLASS=integer>1</font>;i++){
        lin[i].next <font CLASS=symbols>=</font> &amp;lin[i<font CLASS=symbols>+</font><font CLASS=integer>1</font>];
    }
    lin[i].next <font CLASS=symbols>=</font> <font CLASS=integer>0</font>;
    head <font CLASS=symbols>=</font> &amp;lin[<font CLASS=integer>0</font>];
}
Line* get(){
    Line *p <font CLASS=symbols>=</font> head; head=head<font CLASS=symbols>-</font>&gt;next;
    <font CLASS=keyword>return</font> p;
}
<font CLASS=keytype>void</font> put(Line *p){
    p<font CLASS=symbols>-</font>&gt;next <font CLASS=symbols>=</font> head; head = p;
}

<font CLASS=keytype>double</font> multiply(Point &amp;s, Point &amp;e, Point &amp;o)
{
    <font CLASS=keyword>return</font> (s.x <font CLASS=symbols>-</font> o.x)*(e.y <font CLASS=symbols>-</font> o.y) - (s.y-o.y)*(e.x-o.x);
}
<font CLASS=keytype>bool</font> online(Line &amp;l, Point &amp;p)
{
    <font CLASS=keyword>return</font> multiply(l.e, p, l.s)<font CLASS=symbols>==</font><font CLASS=integer>0</font>
           &amp;&amp;(p.x -l.s.x)*(p.x -l.e.x)&lt;<font CLASS=symbols>=</font><font CLASS=integer>0</font>
           &amp;&amp;(p.y -l.s.y)*(p.y-l.e.y)&lt;<font CLASS=symbols>=</font><font CLASS=integer>0</font>;
}

<font CLASS=keytype>bool</font> interseg(Line &amp;u, Line &amp;v)
{
    <font CLASS=keyword>return</font>
        <font CLASS=comment>//排斥实验</font>
        (    (max(u.s.x,u.e.x)&gt;=min(v.s.x,v.e.x))&amp;&amp;                          
             (max(v.s.x,v.e.x)&gt;=min(u.s.x,u.e.x))&amp;&amp;
             (max(u.s.y,u.e.y)&gt;=min(v.s.y,v.e.y))&amp;&amp;
             (max(v.s.y,v.e.y)&gt;=min(u.s.y,u.e.y))&amp;&amp;
        <font CLASS=comment>//跨立实验</font>
             (multiply(v.s,u.e,u.s)*multiply(u.e,v.e,u.s)&gt;<font CLASS=symbols>=</font><font CLASS=integer>0</font>)&amp;&amp;                 
             (multiply(u.s,v.e,v.s)*multiply(v.e,u.e,v.s)&gt;<font CLASS=symbols>=</font><font CLASS=integer>0</font>));
}

<font CLASS=keytype>bool</font> check(Line &amp;a, Line &amp;b){
     <font CLASS=keyword>return</font> interseg(a, b) 
            &amp;&amp; !online(a, b.s)
            &amp;&amp; !online(a, b.e)
            &amp;&amp; !online(b, a.s)
            &amp;&amp; !online(b, a.e);
}

<font CLASS=keytype>int</font> fun(){
    <font CLASS=keytype>int</font> i,j,k;
    Line *p;
    top <font CLASS=symbols>=</font> <font CLASS=integer>0</font>;
    <font CLASS=keyword>for</font>(i<font CLASS=symbols>=</font><font CLASS=integer>1</font>;i&lt;=num;i<font CLASS=symbols>++</font>){
        p <font CLASS=symbols>=</font> get();
        p<font CLASS=symbols>-</font>&gt;no <font CLASS=symbols>=</font> i;
        scanf(<font CLASS=dblquot>"%lf%lf%lf%lf"</font>, &amp;p<font CLASS=symbols>-</font>&gt;s.x,&amp;p<font CLASS=symbols>-</font>&gt;s.y,&amp;p-&gt;e.x,&amp;p<font CLASS=symbols>-</font>&gt;e.y);
        k <font CLASS=symbols>=</font> <font CLASS=integer>0</font>;
        <font CLASS=keyword>for</font>(j<font CLASS=symbols>=</font><font CLASS=integer>0</font>;j&lt;top;j<font CLASS=symbols>++</font>){
            <font CLASS=keyword>if</font>(!check(*p, *save[j])){
                save[k<font CLASS=symbols>++</font>] <font CLASS=symbols>=</font> save[j];
            } <font CLASS=keyword>else</font> {
                put(save[j]);
            }
        }
        save[k<font CLASS=symbols>++</font>] <font CLASS=symbols>=</font> p;
        top <font CLASS=symbols>=</font> k;
    }
    printf(<font CLASS=dblquot>"Top sticks:"</font>);
    <font CLASS=keyword>for</font>(i<font CLASS=symbols>=</font><font CLASS=integer>0</font>;i&lt;top<font CLASS=symbols>-</font><font CLASS=integer>1</font>;i++){
        printf(<font CLASS=dblquot>" %d,"</font>,(save[i])<font CLASS=symbols>-</font>&gt;no);
        put(save[i]);
    }
    printf(<font CLASS=dblquot>" %d.\n"</font>,(save[i])<font CLASS=symbols>-</font>&gt;no);
    put(save[i]);
    <font CLASS=keyword>return</font> <font CLASS=integer>0</font>;
}

<font CLASS=keytype>int</font> main()
{
    init();
    <font CLASS=keyword>while</font>(scanf(<font CLASS=dblquot>"%d"</font>,&amp;num) &amp;&amp; num &gt; <font CLASS=integer>0</font>){
        fun();
    }
    <font CLASS=keyword>return</font> <font CLASS=integer>0</font>;
}



</pre>

</div>
